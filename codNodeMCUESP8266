#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>

const char * ssid = "DIGI-T8CD";
const char * password = "62hGeg2r";
const char * mqtt_broker = "broker.emqx.io";
const char * publish_topic = "/parcareanisia";
const char * mqtt_username = "emqx";
const char * mqtt_password = "public";
const int mqtt_port = 1883;
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);
SoftwareSerial espSerial(16, 5);
void setup_wifi() {
  delay(10);
  Serial.print("\nConnecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  randomSeed(micros());
  Serial.println("\nWiFi connected\nIP address: ");
  Serial.println(WiFi.localIP());
}
void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (mqttClient.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println("try again in 5 seconds");
      delay(5000);
    }
  }
}
void publishMessage(const char * topic, String payload, boolean retained) {
  if (mqttClient.publish(topic, payload.c_str(), true))
    Serial.println("Message published " + String(topic) + ": " + payload);
}


void readVector(int v[]) {
  for (int i = 0; i < 4; i++) {
    while (!Serial.available()) {} // Așteaptă până când sunt date disponibile pentru citire
    v[i] = Serial.parseInt(); // Citeste fiecare element din vector
    Serial.read(); // Consumă separatorul (spațiul) dintre elementele vectorului
  }
}
int v[]={1,1,1,1};
void setup() {
  Serial.begin(57600);
  while (!Serial) delay(1);
  setup_wifi();
 
  mqttClient.setServer(mqtt_broker, mqtt_port);
}
void loop() {
  Serial.flush();
  if (!mqttClient.connected()) {
    reconnect();
  }	


for (int i = 0; i < 4; i++) {
    if(Serial.available()) {// Așteaptă până când sunt date disponibile pentru citire
    v[i] = Serial.parseInt(); // Citeste fiecare element din vector
    Serial.read(); // Consumă separatorul (spațiul) dintre elementele vectorului
  }

}
Serial.flush();
  Serial.println("Vector citit:");
  for (int i = 0; i < 4; i++) {
    Serial.print(v[i]);
    Serial.print(" ");
  }
  


StaticJsonDocument<16384> doc;

    doc["loc1"]=v[0];
     doc["loc2"]=v[1];
     doc["loc3"]=v[2];
     doc["loc4"]=v[3];
  // Serialize JSON to a string
  String jsonString;
  serializeJson(doc, jsonString);
  publishMessage("/parcareanisia", jsonString, true);
  delay(1000);

}
